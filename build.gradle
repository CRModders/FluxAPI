import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "maven-publish"
    id "java-library"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

base {
    archivesName = project.id
}

java {
    // Sets the Java version
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    gradlePluginPortal()

    ivy {
        name = "Cosmic Reach Client"
        url = "https://github.com/CRModders/CosmicArchive/raw/main/versions"

        patternLayout {
            artifact "[classifier]/[revision]/client/Cosmic Reach-[revision].jar"
        }

        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeModule "finalforeach", "cosmicreach"
        }
    }

    ivy {
        name = "Cosmic Reach Server"
        url = "https://github.com/CRModders/CosmicArchive/raw/main/versions"

        patternLayout {
            artifact "[classifier]/[revision]/server/Cosmic Reach-Server-[revision].jar"
            artifact "[classifier]/[revision]/server/Cosmic-Reach-Server-[revision].jar"
        }

        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeModule "finalforeach", "cosmicreach-server"
        }
    }

    ivy {
        name = "Galactic Loader"
        url = "https://github.com/GalacticLoader/GalacticLoader/releases/download/"

        patternLayout {
            artifact "/[revision]/GalacticLoader-[revision].jar"
        }

        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "galacticloader"
        }
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }

    maven {
        name = "Quilt"
        url = "https://maven.quiltmc.org/repository/release"
    }

    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }

    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven/"
    }

    mavenCentral()
    gradlePluginPortal()
}

configurations {
    cosmicreach
    // Allows cosmic reach to be used in the codebase
    compileOnly.extendsFrom(cosmicreach)

    // Allows specifying which stuff gets shadowed
    shadowMe
    api.extendsFrom(shadowMe)

    // Allows to include something without it being in the maven
    internal {
        visible = false
        canBeConsumed = false
        canBeResolved = false
    }
    compileClasspath.extendsFrom(internal)
    runtimeClasspath.extendsFrom(internal)
    testCompileClasspath.extendsFrom(internal)
    testRuntimeClasspath.extendsFrom(internal)

    // Config to be able to load Fabric Mods (Quilt loads mods from the classpath)
    gameMod
    internal.extendsFrom(gameMod)
}

dependencies {
    cosmicreach("finalforeach:cosmicreach:${cosmic_reach_version}:${cosmic_reach_version_type}")

    shadowMe("org.greenrobot:eventbus:${eventbus_version}")
    shadowMe("org.slf4j:slf4j-api:${slf4j_version}")

    // Common with Galactic and Quilt Loader
    compileOnly("net.fabricmc:fabric-loader:${fabric_loader_version}") // Include the base Fabric Loader so we can only use classes from that
    compileOnly("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5")
    compileOnly("io.github.llamalad7:mixinextras-fabric:0.3.5")

    // Compatibility
    gameMod("org.codeberg.CRModders:modmenu:${modmenu_version}")
//    gameMod(files("./run/PopStructures-1.4.3.jar"))
}

/****** TASKS ********/

shadowJar {
    archiveFileName = "${id}-${version}.jar"
    configurations = [ project.configurations.shadowMe ]
}

processResources {
    def templates = [
        "fabric.mod.json",
        "quilt.mod.json",
        "puzzle.mod.json"
    ]

    def templateProperties = [
        "mod_version" : project.version,
        "mod_name" : project.name,
        "mod_id" : id,
        "mod_desc" : flux_desc,
        "mod_group" : project.group,
        "cosmic_reach_version": cosmic_reach_version,
    ]

    // Previous properties, when changed, will affect incremental build status
    inputs.properties templateProperties

    // Properties, when changed, will not affect incremental build status
    templateProperties.put "project", project

    filesMatching(templates) {
        expand templateProperties
    }
}

jar.enabled = false

tasks.register("runQuilt", JavaExec) {
    group = "runs"
    dependsOn "shadowJar"

    mainClass = "org.quiltmc.loader.impl.launch.knot.KnotClient"
    configureWorkingDir(it)
    ignoreExitValue = true

    dependencies {
        implementation("org.codeberg.CRModders:cosmic-quilt:${cosmic_quilt_version}")
    }

    classpath sourceSets.main.runtimeClasspath

    jvmArgs = [
        // Allows stuff to be found through the classpath
        "-Dloader.development=false",
        // Defines path to Cosmic Reach
        "-Dloader.gameJarPath=" + configurations.cosmicreach.asPath,
        // Let Quilt know to include our build and the other mods
        "-Dloader.addMods=" + [ shadowJar.archiveFile.get().asFile ].tap {
            addAll(configurations.gameMod)
        }.join(File.pathSeparator)
    ]
}

tasks.register("runFabric", JavaExec) {
    group = "runs"
    dependsOn "shadowJar"

    mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient"
    configureWorkingDir(it)

    dependencies {
        implementation("galacticloader:galacticloader:${fabric_loader_version}")

        // Loader Dependencies
        implementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
        implementation("net.fabricmc:tiny-mappings-parser:0.2.2.14")
        implementation("net.fabricmc:access-widener:2.1.0")
        implementation("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5")
        implementation("org.ow2.asm:asm:9.6")
        implementation("org.ow2.asm:asm-util:9.6")
        implementation("org.ow2.asm:asm-tree:9.6")
        implementation("org.ow2.asm:asm-analysis:9.6")
        implementation("org.ow2.asm:asm-commons:9.6")
        implementation("io.github.llamalad7:mixinextras-fabric:0.3.5")

        // Loader does not provide slf4j implementation, substitute one
        shadowMe 'ch.qos.logback:logback-classic:1.5.6'
    }

    classpath = sourceSets.main.runtimeClasspath

    jvmArgs = [
        // Stops Fabric from attempting to find mappings, and all the other Minecraft stuff
        "-Dfabric.skipMcProvider=true",
        // Defines path to Cosmic Reach
        "-Dfabric.gameJarPath=" + configurations.cosmicreach.asPath,
        // Let Fabric know to include our build and the other mods
        "-Dfabric.addMods=" + [ shadowJar.archiveFile.get().asFile ].tap {
            addAll(configurations.gameMod)
        }.join(File.pathSeparator)
    ]
}

tasks.register("buildFatJar", ShadowJar) {
    group = "compile"

    configurations = [ project.configurations.shadowMe ]

    dependsOn("compileJava")
    dependsOn("processResources")

    from(processResources.destinationDir)
    from(sourceSets.main.java.classesDirectory)

    archiveClassifier = "fat"
}

tasks.register("buildSlimJar", Jar) {
    group = "compile"

    dependsOn("compileJava")
    dependsOn("processResources")

    from(sourceSets.main.java.classesDirectory)

    archiveClassifier = "slim"
}

tasks.register("buildSourcesJar", Jar) {
    group = "compile"
    from(sourceSets.main.allSource)
    archiveClassifier = "sources"
}

//tasks.register("buildDocsJar", ) {
//    group = "compile"
//
//    archiveClassifier = "docs"
//}

publishing {
    repositories {
        maven {
            name = "crmReleases"
            url = "https://maven.crmodders.dev/releases"
            credentials{
                username = System.getenv("CRMReleasesUsername")
                password = System.getenv("CRMReleasesPassword")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }

        maven {
            name = "crmSnapshots"
            url = "https://maven.crmodders.dev/snapshots"
            credentials{
                username = System.getenv("CRMSnapshotsUsername")
                password = System.getenv("CRMSnapshotsPassword")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    assemble.dependsOn buildSourcesJar, buildFatJar, buildSlimJar

    publications {
        maven(MavenPublication) {
            groupId = group

            if (System.getenv("COMMIT_ID") != null) {
                artifactId = System.getenv("COMMIT_ID")
            } else {
                artifactId = id
            }

            artifact buildFatJar
            artifact source: buildSlimJar, classifier: 'slim', extension: 'jar'
            artifact source: buildSourcesJar, classifier: 'source', extension: 'jar'
        }
    }
}

/******* Utilities ********/

static def configureWorkingDir(Task it) {
    it.workingDir = it.project.file("run")

    it.doFirst {
        if (!workingDir.exists())
            workingDir.mkDirs()
    }
}
