plugins {
    id "application"
    id "maven-publish"
    id "java-library"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

repositories {
    ivy {
        name "Cosmic Reach"
        url "https://cosmic-archive.netlify.app/"
        patternLayout {
            artifact "/Cosmic Reach-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "finalforeach"
        }
    }
    ivy {
        // The game provider for Fabric (equivalent of Cosmic Quilt for Fabric)
        name "Galactic Loader"
        url "https://github.com/GalacticLoader/GalacticLoader/releases/download/"
        patternLayout {
            artifact "/[revision]/GalacticLoader-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "galacticloader"
        }
    }

    maven {
        name "JitPack"
        url "https://jitpack.io"
    }
    maven {
        name "Quilt"
        url "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name "Fabric"
        url "https://maven.fabricmc.net/"
    }
    maven {
        name "Sponge"
        url "https://repo.spongepowered.org/maven/"
    }

    mavenCentral()
}


configurations {
    cosmicreach // Config to provide the Cosmic Reach project
    compileOnly.extendsFrom(cosmicreach) // Allows cosmic reach to be used in the codebase

    gameMod // Config to be able to load Quilt Mods
    implementation.extendsFrom(gameMod)

    shadowMe // Allows specifying which stuff gets shadowed
    api.extendsFrom(shadowMe)
}

shadowJar {
    configurations = [project.configurations.shadowMe]

    mainClassName = "dev.crmodders.flux.FluxAPI"
}


dependencies {
    // Cosmic Reach jar
    cosmicreach("finalforeach:cosmicreach:${cosmic_reach_version}")

    // Fabric Loader (for accessing its stuff in the code)
    compileOnly("net.fabricmc:fabric-loader:${fabric_loader_version}") // Include the base Fabric Loader so we can only use classes from that
    compileOnly("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5")
    compileOnly("io.github.llamalad7:mixinextras-fabric:0.3.5")

    // Json stuff
    shadowMe("com.google.guava:guava:33.0.0-jre")
    shadowMe("com.google.code.gson:gson:2.9.1")
    shadowMe("org.hjson:hjson:${hjson_version}")

    // Logging
    shadowMe("org.tinylog:tinylog:${tiny_logger_version}")
    shadowMe("com.github.tobiasrm:tinylog-coloredconsole:${tiny_logger_version}")

    // Jts
    shadowMe("org.locationtech.jts:jts-core:${jts_core_version}")

    // GDX stuff not included in Cosmic Reach
    shadowMe("com.badlogicgames.gdx:gdx-freetype:${gdx_version}") { exclude group: "com.badlogicgames.gdx" }
    shadowMe("com.badlogicgames.gdx:gdx-freetype-platform:${gdx_version}:natives-desktop") { exclude group: "com.badlogicgames.gdx" }
}

processResources {
    def resourceTargets = [ // Locations of where to inject the properties
                            "fabric.mod.json"
    ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : flux_version,
            "mod_name"        : flux_display_name,
            "mod_id"          : flux_mod_id,
            "mod_desc"        : flux_description,
            "cosmic_reach_version"        : cosmic_reach_version,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}


// Sets up all the Quilt Mods
def String getQuiltModLocations(Configuration config) {
    StringBuilder sb = new StringBuilder()
    for (obj in config.allDependencies) {
        sb.append(File.pathSeparator + config.files(obj)[0])
    }
    return sb.toString()
}


tasks.register("runQuilt") {
    // Sets the task's group
    group = "runs"

    applicationDefaultJvmArgs = [
            "-Dloader.skipMcProvider=true", // Stops Quilt from attempting to find mappings, and all the other Minecraft stuff
            "-Dloader.gameJarPath=" + configurations.cosmicreach.asPath, // Defines path to Cosmic Reach
            "-Dloader.addMods=" +
                    jar.archiveFile.get().asFile + // Add the jar of this project
                    getQuiltModLocations(configurations.gameMod) // Adds the jars of any Quilt or Fabric mods added
    ]

    dependencies {
        // Cosmic Quilt
        implementation("org.codeberg.CRModders:cosmic-quilt:${cosmic_quilt_version}")
    }

    application {
        mainClass = "org.quiltmc.loader.impl.launch.knot.KnotClient" // Quilt's main class
    }

    dependsOn run // The base run task
}

tasks.register("runFabric") {
    // Sets the task's group
    group = "runs"

    // Fabric doesnt search classpaths correctly, so this is needed
    dependsOn "shadowJar"

    applicationDefaultJvmArgs = [
            "-Dfabric.skipMcProvider=true", // Stops Fabric from attempting to find mappings, and all the other Minecraft stuff
            "-Dfabric.gameJarPath=" + configurations.cosmicreach.asPath, // Defines path to Cosmic Reach
            "-Dfabric.addMods=" +
                    shadowJar.archiveFile.get().asFile + // Add the jar of this project
                    getQuiltModLocations(configurations.gameMod) // Adds the jars of any Quilt or Fabric mods added
    ]

    dependencies {
        // Galactic Loader
        implementation("galacticloader:galacticloader:${fabric_loader_version}")

        // Fabric Loader and its stuff
        implementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
        implementation("net.fabricmc:tiny-mappings-parser:0.2.2.14")
        implementation("net.fabricmc:access-widener:2.1.0")
        implementation("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5")
        implementation("org.ow2.asm:asm:9.6")
        implementation("org.ow2.asm:asm-util:9.6")
        implementation("org.ow2.asm:asm-tree:9.6")
        implementation("org.ow2.asm:asm-analysis:9.6")
        implementation("org.ow2.asm:asm-commons:9.6")
        implementation("io.github.llamalad7:mixinextras-fabric:0.3.5")
    }

    application {
        mainClass = "net.fabricmc.loader.impl.launch.knot.KnotClient" // Fabric's main class
    }

    dependsOn run // The base run task
}


run {
    // To run this project in the game, depend on the creation of jar task
    dependsOn "jar"

    // Change the run directory
    File runningDir = new File("run/")
    if (!runningDir.exists())
        runningDir.mkdirs()
    tasks.run.workingDir = runningDir
}



java {
    withSourcesJar()
    // withJavadocJar() // If docs are included with the project, this line can be un-commented

    // Sets the Java version
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = flux_maven_group
            artifactId = flux_mod_id
            version = flux_version

            from components.java
        }
    }

    repositories {

    }
}
